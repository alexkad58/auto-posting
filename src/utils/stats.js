const fs = require('fs');
const { Parser } = require('json2csv');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
const generateAndSendStatistics = async (ctx, db, bot) => {
    const users = await db.getData('/users'); // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const channels = await db.getData('/channels'); // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤

    const statistics = [];
    const userStats = users.map(user => ({
        id: user,
        username: null, // –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ
        name: null,     // –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ
        channelCount: 0 // –ü–æ–¥—Å—á—ë—Ç –∫–∞–Ω–∞–ª–æ–≤
    }));

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö
    for (const [channelId, channelData] of Object.entries(channels)) {
        try {
            const admins = await bot.telegram.getChatAdministrators(channelId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –±–∞–∑—ã
            admins.forEach(admin => {
                if (!admin.user.is_bot && users.includes(admin.user.id)) {
                    const userStat = userStats.find(u => u.id === admin.user.id);
                    if (userStat) {
                        userStat.channelCount += 1;
                        userStat.username = admin.user.username || '';
                        userStat.name = admin.user.first_name || '';
                    }
                }
            });
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error);
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è CSV
    userStats.forEach(user => {
        statistics.push({
            ID: user.id,
            Username: user.username,
            –ò–º—è: user.name,
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ö–∞–Ω–∞–ª–æ–≤: user.channelCount
        });
    });

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV
    const fields = ['ID', 'Username', '–ò–º—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ö–∞–Ω–∞–ª–æ–≤'];
    const parser = new Parser({ fields, delimiter: ';' });
    const csv = parser.parse(statistics);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const filePath = './statistics.csv';
    fs.writeFileSync(filePath, csv, 'utf8');

    // –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const totalChannels = Object.keys(channels).length;
    const totalUsers = users.length;
    const message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${totalChannels}\n- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
    await ctx.replyWithDocument(
        { source: filePath, filename: 'statistics.csv' },
        { caption: message, parse_mode: 'Markdown' }
    );

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(filePath);
}

module.exports = generateAndSendStatistics;
